[core]
# The home folder for airflow, default is ~/airflow
airflow_home = C:\temp\airflow

# The folder where your airflow pipelines live, most likely a
# subfolder in a code repository. This path must be absolute.
dags_folder = C:\temp\airflow\dags

# The folder where airflow should store its log files
# This path must be absolute
base_log_folder = C:\temp\airflow\logs

# Airflow can store logs remotely in AWS S3, Google Cloud Storage or Elastic Search.
# Set this to True if you want to enable remote logging.
remote_logging = False

# Users must supply a password when creating an admin account
secret_key = temporary_key

# The number of retries each task is going to have by default
default_task_retries = 2

# Whether to load the examples that ship with Airflow. It's good to
# get started, but you probably want to set this to False in a production
# environment
load_examples = False

# Whether to load the default connections that ship with Airflow. It's good to
# get started, but you probably want to set this to False in a production
# environment
load_default_connections = True

# The executor class that airflow should use. Choices include
# SequentialExecutor, LocalExecutor, CeleryExecutor, DaskExecutor, KubernetesExecutor, CeleryKubernetesExecutor or the
# full import path to the class when using a custom executor.
executor = LocalExecutor

# The SqlAlchemy connection string to the metadata database.
# SqlAlchemy supports many different database engine, more information
# their website
sql_alchemy_conn = sqlite:///C:\temp\airflow\airflow.db

# Whether to use row level locking
use_row_level_locking = True

# The amount of parallelism as a setting to the executor. This defines
# the max number of task instances that should run simultaneously
# on this airflow installation
parallelism = 32

# The number of task instances allowed to run concurrently by the scheduler
# in one airflow process
max_active_tasks_per_dag = 16

# The number of DAGs allowed to run concurrently by the scheduler
max_active_runs_per_dag = 16

# Whether to enable pickling for xcom (note that this is insecure and allows for
# RCE exploits). This will be deprecated in Airflow 2.0 (be forced to False).
enable_xcom_pickling = False

# When a task is killed, this defines the time in seconds that
# it has to cleanup after it is sent a SIGTERM, before it is SIGKILLED
killed_task_cleanup_time = 60

# Whether to override params with the dag_run.conf that is passed to the DAG
dag_run_conf_overrides_params = True

# The class to use for running task instances in a subprocess.
# Choices include StandardTaskRunner, CgroupTaskRunner or the full import
# path to the class when using a custom task runner.
task_runner = StandardTaskRunner

# If set, tasks without a `run_as_user` argument will be run with this user
# Can be used to de-elevate a sudo user running Airflow when executing tasks
default_task_runner_user = airflow

# Define the actual task runner class to use, if not use the standard one.
# The import path should be on the same path as the airflow core.
task_runner_log_server_port = 8793

# The schema to use for the metadata database.
# SqlAlchemy supports many different database engine, more information
# their website
sql_engine_encoding = utf-8

# if SqlAlchemy should pool database connections.
sql_alchemy_pool_enabled = True

# The pool size is the maximum number of persistent connections to keep in the pool.
sql_alchemy_pool_size = 5

# The maximum overflow is the number of connections that can be opened beyond the pool_size.
sql_alchemy_pool_max_overflow = 10

# The maximum number of retries each task is going to have by default.
max_task_retries = 2

# Updating serialized DAG can not be faster than a minimum interval to reduce database write rate.
min_serialized_dag_update_interval = 30

# Updating serialized DAG can not be faster than a minimum interval to reduce database write rate.
min_serialized_dag_fetch_interval = 10

# On each dagrun check against defined SLAs
check_slas = True

# Path to custom XCom class that will be used to store and retrieve XCom objects.
# The class must inherit from BaseXCom.
xcom_backend = airflow.models.xcom.BaseXCom

# By default Airflow plugins are lazily-loaded (only loaded when required). Set it to False,
# if you want to load plugins whenever 'airflow' is invoked via cli or loaded from module.
lazy_load_plugins = True

# Number of seconds after which a task is killed and retried when
# it is out of memory.
task_out_of_memory_kill = True

# The amount of memory (in GB) that a task can use before it is killed.
task_out_of_memory_limit = 4

# If set, Airflow will track files in plugins_folder directory. When it detects changes,
# it will restart the gunicorn webserver
reload_on_plugin_change = False

[logging]
# The folder where airflow should store its log files
# This path must be absolute
base_log_folder = C:\temp\airflow\logs

# Airflow can store logs remotely in AWS S3, Google Cloud Storage or Elastic Search.
# Set this to True if you want to enable remote logging.
remote_logging = False

# Logging level
logging_level = INFO

# Logging class
# Specify the class that will specify the logging configuration
# This class has to be on the python classpath
logging_config_class =

# Log format for when Airflow writes logs to a file
log_format = [%%(asctime)s] {%%(filename)s:%%(lineno)d} %%(levelname)s - %%(message)s

# Log format for Airflow console output
simple_log_format = %%(asctime)s %%(levelname)s - %%(message)s

# Logging level for Airflow console output
log_level = INFO

# Logging level for Flask-appbuilder UI
fab_logging_level = WARN

# Logging level for Flask-appbuilder UI
fab_logging_level = WARN

[webserver]
# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is used in automated emails that
# airflow sends to point links to the right web server
base_url = http://localhost:8080

# Default timezone to display all dates in the UI, can be UTC, system, or
# any IANA timezone string (e.g. Europe/Amsterdam). If left empty the
# default value of core/default_timezone will be used
default_ui_timezone = UTC

# The ip specified when starting the web server
web_server_host = 0.0.0.0

# The port on which to run the web server
web_server_port = 8080

# Paths to the SSL certificate and key for the web server. When both are
# provided SSL will be enabled. This does not change the web server port.
web_server_ssl_cert =
web_server_ssl_key =

# Number of seconds the webserver waits before killing gunicorn master that doesn't respond
web_server_master_timeout = 120

# Number of seconds the gunicorn webserver waits before timing out on a worker
web_server_worker_timeout = 120

# Number of workers to refresh at a time. When set to 0, worker refresh is
# disabled. When nonzero, airflow periodically refreshes webserver workers by
# bringing up new ones and killing old ones.
worker_refresh_batch_size = 1

# Number of seconds to wait before refreshing a batch of workers.
worker_refresh_interval = 30

# If set to True, Airflow will track files in plugins_folder directory. When it detects changes,
# it will restart the gunicorn webserver
reload_on_plugin_change = False

# Secret key used to run your flask app
# It should be as random as possible
secret_key = temporary_key

# Number of workers to run the Gunicorn web server
workers = 4

# The worker class gunicorn should use. Choices include
# sync (default), eventlet, gevent
worker_class = sync

# Log files for the gunicorn webserver. '-' means log to stderr.
access_logfile = -
error_logfile = -

# Expose the configuration file in the web server
expose_config = False

# Expose hostname in the web server
expose_hostname = True

# Expose stacktrace in the web server
expose_stacktrace = True

# Default DAG view. Valid values are: tree, graph, duration, gantt, landing_times
dag_default_view = graph

# Default DAG orientation. Valid values are:
# LR (Left->Right), TB (Top->Bottom), RL (Right->Left), BT (Bottom->Top)
dag_orientation = LR

# The amount of time (in secs) webserver will wait for initial handshake
# while fetching logs from other worker machine
log_fetch_timeout_sec = 5

# Time interval (in secs) to wait before next log fetching.
log_fetch_delay_sec = 2

# Distance away from page bottom to enable auto tailing.
log_auto_tailing_offset = 30

# Animation speed for auto tailing log display.
log_animation_speed = 1000

# By default, the webserver shows paused DAGs. Set this to False to hide them.
hide_paused_dags_by_default = False

# Consistent page size across all listing views in the UI
page_size = 100

# Define the color of navigation bar
navbar_color = #fff

# Default dagrun to show in UI
default_dag_run_display_number = 25

# Enable werkzeug `ProxyFix` middleware for reverse proxy
enable_proxy_fix = False

# Set secure flag on session cookie
cookie_secure = False

# Set samesite policy on session cookie
cookie_samesite = Lax

# Default setting for wrap toggle on DAG code and TI log views.
default_wrap = False

# Allow the UI to be rendered in a frame
x_frame_enabled = True

# Send anonymous user activity to your analytics tool
# choose from google_analytics, segment, or metarouter
analytics_tool =

# Unique ID of your account in the analytics tool
analytics_id =

# Update FAB permissions and sync security manager roles
# on webserver startup
update_fab_perms = True

# The UI cookie lifetime in days
session_lifetime_days = 30

# Allow the UI to be rendered in a frame
x_frame_enabled = True

[smtp]
# If you want airflow to send emails on retries, failure, and you want to use
# the airflow.utils.email.send_email_smtp function, you have to configure an
# smtp server here
smtp_host = localhost
smtp_starttls = True
smtp_ssl = False
smtp_user =
smtp_password =
smtp_port = 587
smtp_mail_from = airflow@example.com
smtp_timeout = 30
smtp_retry_limit = 5

[sentry]
# Sentry (https://docs.sentry.io) integration. Here you can supply
# additional configuration for the sentry SDK for Python. The
# list of parameters is extended on an ongoing basis and you can find
# the latest list of parameters in the sentry-python documentation:
# https://docs.sentry.io/platforms/python/configuration/options/
sentry_dsn =

[celery]
# This section only applies if you are using the CeleryExecutor in
# [core] section above

# The app name that will be used by celery
celery_app_name = airflow.executors.celery_executor

# The concurrency that will be used when starting workers with the
# "airflow celery worker" command. This defines the number of task instances that
# a worker will take, so size up your workers based on the resources on
# your worker box and the nature of your tasks
worker_concurrency = 16

# The maximum and minimum concurrency that will be used when starting workers with the
# "airflow celery worker" command (always keep minimum processes, but grow
# to maximum if necessary). Note the value should be max_concurrency,min_concurrency
# Pick these numbers based on resources on worker box and the nature of the task.
# If autoscale option is available, worker_concurrency will be ignored.
# http://docs.celeryproject.org/en/latest/reference/celery.bin.worker.html#cmdoption-celery-worker-autoscale
# Example: worker_autoscale = 16,12
worker_autoscale =

# The number of seconds to wait before timing out `send_task_to_executor` or
# `fetch_task_result` operations.
worker_timeout = 120

# The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
# a sqlalchemy database. Refer to the Celery documentation for more information.
broker_url = sqla+mysql://airflow:airflow@localhost:3306/airflow

# The Celery result_backend. When a job finishes, it needs to update the
# metadata of the job. Therefore it will post a message on a message bus,
# or insert it into a database (depending of the backend)
# This status is used by the scheduler to update the state of the task
# The use of a database is highly recommended
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-result-backend-settings
result_backend = db+mysql://airflow:airflow@localhost:3306/airflow

# Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start
# it `airflow celery flower`. This defines the IP that Celery Flower runs on
flower_host = 0.0.0.0

# The root URL for Flower
flower_url_prefix =

# This defines the port that Celery Flower runs on
flower_port = 5555

# Securing Flower with Basic Authentication
# Accepts user:password pairs separated by a comma
flower_basic_auth =

# Default queue that tasks get assigned to and that worker listen on.
default_queue = default

# How many processes CeleryExecutor uses to sync task state.
# 0 means to use max(1, number of cores - 1) processes.
sync_parallelism = 0

# The class to use for run task executor.
# Choices include StandardTaskRunner, CgroupTaskRunner or the full import
# path to the class when using a custom task runner.
task_runner = StandardTaskRunner

# If set, tasks without a `run_as_user` argument will be run with this user
# Can be used to de-elevate a sudo user running Airflow when executing tasks
default_task_runner_user = airflow

# Define the actual task runner class to use, if not use the standard one.
# The import path should be on the same path as the airflow core.
task_runner_log_server_port = 8793

# The schema to use for the metadata database.
# SqlAlchemy supports many different database engine, more information
# their website
sql_engine_encoding = utf-8

# if SqlAlchemy should pool database connections.
sql_alchemy_pool_enabled = True

# The pool size is the maximum number of persistent connections to keep in the pool.
sql_alchemy_pool_size = 5

# The maximum overflow is the number of connections that can be opened beyond the pool_size.
sql_alchemy_pool_max_overflow = 10

# The maximum number of retries each task is going to have by default.
max_task_retries = 2

# Updating serialized DAG can not be faster than a minimum interval to reduce database write rate.
min_serialized_dag_update_interval = 30

# Updating serialized DAG can not be faster than a minimum interval to reduce database write rate.
min_serialized_dag_fetch_interval = 10

# On each dagrun check against defined SLAs
check_slas = True

# Path to custom XCom class that will be used to store and retrieve XCom objects.
# The class must inherit from BaseXCom.
xcom_backend = airflow.models.xcom.BaseXCom

# By default Airflow plugins are lazily-loaded (only loaded when required). Set it to False,
# if you want to load plugins whenever 'airflow' is invoked via cli or loaded from module.
lazy_load_plugins = True

# Number of seconds after which a task is killed and retried when
# it is out of memory.
task_out_of_memory_kill = True

# The amount of memory (in GB) that a task can use before it is killed.
task_out_of_memory_limit = 4

# If set, Airflow will track files in plugins_folder directory. When it detects changes,
# it will restart the gunicorn webserver
reload_on_plugin_change = False
